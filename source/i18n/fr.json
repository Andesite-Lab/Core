{
  "error": {
    "core": {
      "config": {
        "validation": {
          "array": {
            "contains": "Le tableau doit contenir au moins une valeur correspondante",
            "is_array": "La valeur doit être un tableau mais a obtenu {{type}}",
            "max_contains": "Le tableau doit contenir au maximum {{max}} valeurs correspondantes",
            "max_items": "La longueur du tableau doit être inférieure ou égale à {{max}} mais a obtenu {{length}}",
            "min_contains": "Le tableau doit contenir au moins {{min}} valeurs correspondantes",
            "min_items": "La longueur du tableau doit être supérieure ou égale à {{min}} mais a obtenu {{length}}",
            "unique_items": "Les éléments du tableau doivent être uniques"
          },
          "async_iterator": {
            "is_async_iterator": "La valeur doit être un itérateur asynchrone mais a obtenu {{type}}"
          },
          "bigint": {
            "exclusive_maximum": "Le bigint doit être inférieur à {{max}} mais a obtenu {{value}}",
            "exclusive_minimum": "Le bigint doit être supérieur à {{min}} mais a obtenu {{value}}",
            "is_bigint": "La valeur doit être un bigint mais a obtenu {{type}}",
            "maximum": "Le bigint doit être inférieur ou égal à {{max}} mais a obtenu {{value}}",
            "minimum": "Le bigint doit être supérieur ou égal à {{min}} mais a obtenu {{value}}",
            "multiple_of": "Le bigint doit être un multiple de {{multiple}} mais a obtenu {{value}}"
          },
          "boolean": {
            "is_boolean": "La valeur doit être un booléen mais a obtenu {{type}}"
          },
          "date": {
            "exclusive_maximum_timestamp": "Le timestamp de la date doit être inférieur à {{max}} mais a obtenu {{value}}",
            "exclusive_minimum_timestamp": "Le timestamp de la date doit être supérieur à {{min}} mais a obtenu {{value}}",
            "is_date": "La valeur doit être une date mais a obtenu {{type}}",
            "maximum_timestamp": "Le timestamp de la date doit être inférieur ou égal à {{max}} mais a obtenu {{value}}",
            "minimum_timestamp": "Le timestamp de la date doit être supérieur ou égal à {{min}} mais a obtenu {{value}}",
            "multiple_of_timestamp": "Le timestamp de la date doit être un multiple de {{multiple}} mais a obtenu {{value}}"
          },
          "default": "Type d'erreur inconnu",
          "format": {
            "already_exists": "Le format '{{format}}' existe déjà",
            "does_not_exist": "Le format '{{format}}' n'existe pas"
          },
          "function": {
            "is_function": "La valeur doit être une fonction mais a obtenu {{type}}"
          },
          "integer": {
            "exclusive_maximum": "L'entier doit être inférieur à {{max}} mais a obtenu {{value}}",
            "exclusive_minimum": "L'entier doit être supérieur à {{min}} mais a obtenu {{value}}",
            "is_integer": "La valeur doit être un entier mais a obtenu {{type}}",
            "maximum": "L'entier doit être inférieur ou égal à {{max}} mais a obtenu {{value}}",
            "minimum": "L'entier doit être supérieur ou égal à {{min}} mais a obtenu {{value}}",
            "multiple_of": "L'entier doit être un multiple de {{multiple}} mais a obtenu {{value}}"
          },
          "intersect": {
            "is_intersect": "Toutes les valeurs doivent correspondre",
            "unevaluated_properties": "Propriétés non évaluées trouvées: {{props}}"
          },
          "iterator": {
            "is_iterator": "La valeur doit être un itérateur mais a obtenu {{type}}"
          },
          "kind": {
            "is_kind": "La valeur doit être de type {{kind}} mais a obtenu {{type}}"
          },
          "literal": {
            "is_literal": "La valeur doit être un littéral mais a obtenu {{type}}"
          },
          "never": {
            "is_never": "La valeur doit être jamais mais a obtenu {{type}}"
          },
          "not": {
            "not_match": "La valeur ne doit pas correspondre"
          },
          "null": {
            "is_null": "La valeur doit être nulle mais a obtenu {{type}}"
          },
          "number": {
            "exclusive_maximum": "Le nombre doit être inférieur à {{max}} mais a obtenu {{value}}",
            "exclusive_minimum": "Le nombre doit être supérieur à {{min}} mais a obtenu {{value}}",
            "is_number": "La valeur doit être un nombre mais a obtenu {{type}}",
            "maximum": "Le nombre doit être inférieur ou égal à {{max}} mais a obtenu {{value}}",
            "minimum": "Le nombre doit être supérieur ou égal à {{min}} mais a obtenu {{value}}",
            "multiple_of": "Le nombre doit être un multiple de {{multiple}} mais a obtenu {{value}}"
          },
          "object": {
            "additional_properties": "Propriétés supplémentaires trouvées: {{props}}",
            "is_object": "La valeur doit être un objet mais a obtenu {{type}}",
            "max_properties": "L'objet doit avoir au plus {{max}} propriétés mais a obtenu {{value}}",
            "min_properties": "L'objet doit avoir au moins {{min}} propriétés mais a obtenu {{value}}",
            "required_property": "Propriété requise manquante: {{key}}"
          },
          "promise": {
            "is_promise": "La valeur doit être une promesse mais a obtenu {{type}}"
          },
          "regexp": {
            "not_match": "La chaîne doit correspondre à l'expression régulière {{pattern}} mais a obtenu {{value}}"
          },
          "string": {
            "format": "La chaîne doit être au format {{format}} mais a obtenu {{value}}",
            "format_unknown": "Format de chaîne inconnu {{format}}",
            "is_string": "La valeur doit être une chaîne de caractères mais a obtenu {{type}}",
            "max_length": "La longueur de la chaîne doit être inférieure ou égale à {{max}} mais a obtenu {{value}}",
            "min_length": "La longueur de la chaîne doit être supérieure ou égale à {{min}} mais a obtenu {{value}}",
            "pattern": "La chaîne doit correspondre au modèle {{pattern}} mais a obtenu {{value}}"
          },
          "symbol": {
            "is_symbol": "La valeur doit être un symbole mais a obtenu {{type}}"
          },
          "tuple": {
            "is_tuple": "La valeur doit être un tuple mais a obtenu {{type}}",
            "length": "Le tuple doit avoir une longueur de {{length}} mais a obtenu {{value}}"
          },
          "uint8array": {
            "is_uint8array": "La valeur doit être un Uint8Array mais a obtenu {{type}}",
            "max_byte_length": "Le Uint8Array doit avoir une longueur en octets inférieure ou égale à {{max}} mais a obtenu {{value}}",
            "min_byte_length": "Le Uint8Array doit avoir une longueur en octets supérieure ou égale à {{min}} mais a obtenu {{value}}"
          },
          "undefined": {
            "is_undefined": "La valeur doit être indéfinie mais a obtenu {{type}}"
          },
          "union": {
            "is_union": "La valeur doit être l'un des {{types}} mais a obtenu {{type}}"
          },
          "void": {
            "is_void": "La valeur doit être vide mais a obtenu {{type}}"
          }
        }
      },
      "util": {
        "invalid_environment": "Environnement invalide"
      }
    }
  }
}